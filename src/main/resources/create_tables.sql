-- create_tables.sql

-- Create schema if it does not exist
-- create_tables.sql

-- Create schema if it does not exist
CREATE SCHEMA IF NOT EXISTS %s;


-- Create user_category table
CREATE TABLE IF NOT EXISTS %s.user_category (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_name VARCHAR(100) NOT NULL,
    status BOOLEAN NOT NULL
    );

-- Create user table
CREATE TABLE IF NOT EXISTS %s.users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    user_category_id BIGINT NOT NULL,
    email VARCHAR(255),
    gender VARCHAR(10) NOT NULL ,
    phone_number VARCHAR(20) NOT NULL,
    created_by VARCHAR(50),
    created_date TIMESTAMP,
    last_modified_by VARCHAR(50),
    last_modified_date TIMESTAMP,
    FOREIGN KEY (user_category_id) REFERENCES %s.user_category(id)
    );
-- Create patient table
CREATE TABLE IF NOT EXISTS %s.patient (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    date_of_birth DATE ,
    gender VARCHAR(10) NOT NULL ,
    contact_number VARCHAR(20) ,
    email VARCHAR(255),
    address TEXT,
    emergency_contact VARCHAR(20) UNIQUE NOT NULL,
    user_id BIGINT UNIQUE NOT NULL,
    created_by VARCHAR(50),
    created_date TIMESTAMP,
    last_modified_by VARCHAR(50),
    last_modified_date TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES %s.users(id)
    );




CREATE TABLE IF NOT EXISTS %s.doctors (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      first_name VARCHAR(100) NOT NULL,
      last_name VARCHAR(100) NOT NULL,
      specialty VARCHAR(100),
      qualification VARCHAR(100),
      experience_years INT,
      contact_number VARCHAR(15),
      email VARCHAR(100),
      user_id BIGINT UNIQUE NOT NULL,
      created_by VARCHAR(50),
      created_date TIMESTAMP,
      last_modified_by VARCHAR(50),
      last_modified_date TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES %s.users(id)
);


CREATE TABLE IF NOT EXISTS %s.hospital_service (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    service_name VARCHAR(100) NOT NULL,
    description TEXT
);


CREATE TABLE IF NOT EXISTS %s.department (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    department_name VARCHAR(100) NOT NULL,
    description TEXT,
    service_id BIGINT,
    FOREIGN KEY (service_id) REFERENCES %s.hospital_service(id)
);


CREATE TABLE IF NOT EXISTS %s.patient_dept_category (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id BIGINT NOT NULL,
    department_id BIGINT NOT NULL,
    FOREIGN KEY (patient_id) REFERENCES %s.patient(id),
    FOREIGN KEY (department_id) REFERENCES %s.department(id)
);


CREATE TABLE IF NOT EXISTS %s.doc_dept_category (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    doctor_id BIGINT NOT NULL,
    department_id BIGINT NOT NULL,
    available_from TIME NOT NULL,
    available_to TIME NOT NULL,
    available_time_interval INT NOT NULL,
    charges_per_time_interval DECIMAL(10,0) NOT NULL,
    FOREIGN KEY (doctor_id) REFERENCES %s.doctors(id),
    FOREIGN KEY (department_id) REFERENCES %s.department(id)
);


CREATE TABLE IF NOT EXISTS %s.appointment_slots (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    appointment_date DATE NOT NULL,
    appoint_start_time TIME NOT NULL,
    appoint_end_time TIME NOT NULL,
    appoint_interval_time INT NOT NULL,
    appointment_charge DECIMAL(10,0) NOT NULL
);


CREATE TABLE IF NOT EXISTS %s.appointments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id BIGINT NOT NULL,
    doctor_id BIGINT NOT NULL,
    appointment_slot_id BIGINT NOT NULL,
    status VARCHAR(50) NOT NULL,
    consultation_type VARCHAR(50) NOT NULL,
    notes TEXT,
    FOREIGN KEY (patient_id) REFERENCES %s.patient(id),
    FOREIGN KEY (doctor_id) REFERENCES %s.doctors(id),
    FOREIGN KEY (appointment_slot_id) REFERENCES %s.appointment_slots(id)
);






