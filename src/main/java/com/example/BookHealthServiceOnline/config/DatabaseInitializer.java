package com.example.BookHealthServiceOnline.config;

import org.springframework.boot.CommandLineRunner;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;

@Component
public class DatabaseInitializer implements CommandLineRunner {

    private final JdbcTemplate jdbcTemplate;

    public DatabaseInitializer(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public void run(String... args) throws Exception {
        jdbcTemplate.execute(
                "CREATE TABLE IF NOT EXISTS hospital (" +
                        "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "hospital_name VARCHAR(255) NOT NULL, " +
                        "hospital_address VARCHAR(255), " +
                        "contact_number VARCHAR(20), " +
                        "tenant_id VARCHAR(50) UNIQUE NOT NULL, " +
                        "url VARCHAR(255) UNIQUE, " +
                        "domain_url VARCHAR(255), " +
                        "created_by VARCHAR(50), " +
                        "created_date TIMESTAMP, " +
                        "last_modified_by VARCHAR(50), " +
                        "last_modified_date TIMESTAMP" +
                        "); " +
                        "CREATE TABLE IF NOT EXISTS admin_user (" +
                        "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "username VARCHAR(100) NOT NULL UNIQUE, " +
                        "password VARCHAR(255) NOT NULL, " +
                        "email VARCHAR(255), " +
                        "phone_number VARCHAR(20) NOT NULL, " +
                        "user_role VARCHAR(50)," +
                        "created_by VARCHAR(50), " +
                        "created_date TIMESTAMP, " +
                        "last_modified_by VARCHAR(50), " +
                        "last_modified_date TIMESTAMP" +// Use ENUM with single quotes
                        ")"
        );


    }
    public String createSchemaAndTables(String tenantId) {

        String schemaCreationSql = String.format("CREATE SCHEMA IF NOT EXISTS %s;", tenantId);

        String tableCreationSql = readSqlFile("/create_tables.sql");

        try {

            tableCreationSql = String.format(tableCreationSql, tenantId, tenantId, tenantId, tenantId, tenantId,tenantId,tenantId,tenantId);


            // Execute schema creation
            jdbcTemplate.execute(schemaCreationSql);

            // Execute table creation
            jdbcTemplate.execute(tableCreationSql);

            return "success";
        } catch (Exception e) {
            e.printStackTrace();
            return "error";
        }
    }

    private String readSqlFile(String fileName) {
        try (BufferedReader reader = new BufferedReader(
                new InputStreamReader(getClass().getResourceAsStream(fileName), StandardCharsets.UTF_8))) {
            if (reader == null) {
                throw new RuntimeException("SQL file not found: " + fileName);
            }
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                sb.append(line).append("\n");
            }
            return sb.toString();
        } catch (IOException e) {
            throw new RuntimeException("Error reading SQL file", e);
        }
    }


}
